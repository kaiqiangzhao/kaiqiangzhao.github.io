<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaiqiangzhao.github.io</id>
    <title>OOK</title>
    <updated>2020-04-10T03:48:45.784Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kaiqiangzhao.github.io"/>
    <link rel="self" href="https://kaiqiangzhao.github.io/atom.xml"/>
    <subtitle>Simpler life, Deeper mind.</subtitle>
    <logo>https://kaiqiangzhao.github.io/images/avatar.png</logo>
    <icon>https://kaiqiangzhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, OOK</rights>
    <entry>
        <title type="html"><![CDATA[如何保证幂等性]]></title>
        <id>https://kaiqiangzhao.github.io/post/ru-he-bao-zheng-mi-deng-xing/</id>
        <link href="https://kaiqiangzhao.github.io/post/ru-he-bao-zheng-mi-deng-xing/">
        </link>
        <updated>2020-04-09T14:28:01.000Z</updated>
        <summary type="html"><![CDATA[<p>保证幂等性的四种方式</p>
]]></summary>
        <content type="html"><![CDATA[<p>保证幂等性的四种方式</p>
<!-- more -->
<ol>
<li>创建唯一索引</li>
<li>先select, 后insert</li>
<li>分布式锁(redis)</li>
<li>状态机</li>
</ol>
<hr>
<h2 id="1-创建唯一索引">1. 创建唯一索引</h2>
<p>如退款服务，调用支付服务，完成退款。<br>
可以使用退款编码作为出账流水表的唯一索引。<br>
当支付服务进行退款操作，创建出账流水时，如果已完成退款，会因为唯一索引重复而创建失败</p>
<p>如果分库分表，不同库表的唯一索引不同步，可能造成在不同的库表重复创建退款记录。</p>
<h2 id="2-先select-后insert">2. 先select, 后insert</h2>
<p>那就不能直接创建，需要先查询所有库表内有没有约束索引，没有的话再创建出账流水。</p>
<p>但是查询和插入不是原子操作，不同的线程都可以执行查询操作，然后进入同一片临界区，如常用的if语句。<br>
然后都执行了插入操作。</p>
<h2 id="3-分布式锁">3. 分布式锁</h2>
<p>插入更新操作前需要先获取到锁。此时不需要对查询加锁，因为多个线程都查询后，进入临界区，执行插入操作，没有获得锁的全部按失效处理后退出。<br>
常用有redis分布式锁。<br>
上锁命令为<code>setnx key</code>(set if not exists)<br>
去锁命令为<code>del key</code></p>
<p>redis实现分布式锁存在下面三个问题</p>
<p><strong>问题1：</strong><br>
为了避免因为异常，导致释放锁失败，需要给锁加上过期时间<code>expire key 5</code></p>
<p><strong>问题2：</strong><br>
但是这里也存在一个问题，就是<code>setnx key</code>和<code>expire key 5</code>命令中间redis服务器发生宕机，这样也可能出现死锁。<br>
可以使用一下命令，将二者绑定为原子操作<code>set key true ex 5 nx</code></p>
<p><strong>问题3：</strong><br>
还有一个问题就是，锁过期时间不能小于业务执行时间，一般的业务操作会放入消息队列里等待执行，如果<code>del key</code>操作之前锁过期了，就无法串行执行，依旧会出现非幂等数据。</p>
<h2 id="4-状态机">4. 状态机</h2>
<p>执行操作前先判断资源的状态是否符合状态流转的条件，不要在代码里面<code>if</code>判断，否则又会陷入上面第二个问题。将状态判断交给数据库，靠数据库本身的锁机制进行控制。</p>
<p><code>update order set status=1 where status=2</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[建站历险记]]></title>
        <id>https://kaiqiangzhao.github.io/post/jian-zhan-li-xian-ji/</id>
        <link href="https://kaiqiangzhao.github.io/post/jian-zhan-li-xian-ji/">
        </link>
        <updated>2020-04-06T08:04:49.000Z</updated>
        <summary type="html"><![CDATA[<p>个人blog建站历险记</p>
]]></summary>
        <content type="html"><![CDATA[<p>个人blog建站历险记</p>
<!-- more -->
<h2 id="自己的建站历险记">自己的建站历险记：</h2>
<ol>
<li>github page(jekyll)</li>
<li>github page((pelican)</li>
<li>namesilo购买域名</li>
<li>xxx购买香港服务器</li>
<li>搭建typecho</li>
<li>删除香港服务器</li>
<li>github page(gridea)</li>
<li>开启github page 的 https</li>
</ol>
<h2 id="说明">说明</h2>
<p>jekyll，pelican, gridea都是静态网站的生成器。</p>
<p>github page 默认选用就是jekyll<br>
pelican 的开发语言是python，无管理后台<br>
gridea 有mac，win，linux平台的管理后台<br>
typecho的搭建也不复杂，就是没有找到自己喜欢的主题，然后就删了服务器，玩完跑路。</p>
<h2 id="一些注意事项">一些注意事项：</h2>
<ul>
<li>typecho 需要安装php和nginx，注意php版本对应的php-fpm的版本</li>
<li>需要新建一个数据库，库名叫“typecho”</li>
<li>typecho文件解压编译的位置所属的用户，要有对数据库的操作权限。否则在web配置页面，会报连接数据库错误。</li>
<li>dns解析A绑定下面四个ip，<code>185.199.108.153，185.199.109.153，185.199.110.153，185.199.111.153</code>, 不要光绑定你ping出来的那个地址，因为可能会变。具体看<a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">官网</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tmux-终端复用]]></title>
        <id>https://kaiqiangzhao.github.io/post/tmux-zhong-duan-fu-yong/</id>
        <link href="https://kaiqiangzhao.github.io/post/tmux-zhong-duan-fu-yong/">
        </link>
        <updated>2018-12-17T15:16:55.000Z</updated>
        <summary type="html"><![CDATA[<p>linux 下的终端复用工具，一般用来跑后台程序，以防网络中断，退出会话，导致程序终止。</p>
]]></summary>
        <content type="html"><![CDATA[<p>linux 下的终端复用工具，一般用来跑后台程序，以防网络中断，退出会话，导致程序终止。</p>
<!-- more -->
<ol>
<li>简介</li>
<li>会话</li>
<li>窗口</li>
<li>窗格</li>
</ol>
<hr>
<h2 id="简介">简介</h2>
<p>tmux is a terminal multiplexer.(终端复用)</p>
<p>tmux是终端多路复用神器。它允许你在一个终端的多个程序之间轻松切换。</p>
<p>使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需在浪费多余的终端来连接这台远程主机。当我们在tmux中工作的时候，即使关掉连接窗口，再次连接，进入tmux和会话我们之前的工作仍然在继续</p>
<hr>
<p><strong>tmux中有三种概念：会话（session），窗口（window），窗格（pane）</strong></p>
<ul>
<li>会话有点像是tmux的服务，在后端运行，我们可以通过tmux命令创建这种服务，并且可以通过tmux命令查看，附件到后端允许的会话中。</li>
<li>一个会话可以包含多个窗口</li>
<li>一个窗口可以被分割成多个窗格</li>
</ul>
<hr>
<h2 id="会话">会话</h2>
<p>1.<strong>tmux new -s session1</strong></p>
<ul>
<li>新建一个会话，-s (session的首字母)。运行后会从终端环境进入到会话环境。</li>
<li>当进入到session之后，在下面有一条绿色的状态指示栏，example：[session]0:myserver1*</li>
<li>依次是当前会话的名字，会话中的窗口序号，以及窗口名字，窗口名字后面有一个星号*,表示是我们操作的当前窗口。</li>
</ul>
<p>2.<strong>ctrl+b d</strong></p>
<ul>
<li>退出会话，回到shell的终端环境（linux的shell、bash，termial），d是detach(脱离)，但此时tmux的程序还在后端运行。</li>
</ul>
<p>3.<strong>tmux ls</strong></p>
<ul>
<li>终端环境查看会话列表</li>
</ul>
<p>4.<strong>ctrl+b s</strong></p>
<ul>
<li>会话环境查看会话列表，且可以通过方向键选择会话并回车，在会话间进行切换</li>
</ul>
<p>5.<strong>tmux a -t session1</strong></p>
<ul>
<li>从终端环境进入会话，a字母是attach（附加）的头字母，-t 指定要进入的已存在的会话名</li>
</ul>
<p>6.<strong>tmux kill-session -t session1</strong></p>
<ul>
<li>销毁会话，可以发生在终端环境和会话环境</li>
<li>在终端直接输入即可，在会话中需要先ctrl+b :（注意冒号），然后输入命令</li>
</ul>
<p>7.<strong>tmux rename -t old_session_name new_session_name</strong></p>
<ul>
<li>重命名会话，在终端环境中</li>
</ul>
<p>8.**ctrl+b $ **</p>
<ul>
<li>重命名会话，在会话环境中</li>
</ul>
<hr>
<h2 id="窗口">窗口</h2>
<p>窗口是我们工作的最小单位</p>
<p>默认情况下，在一个window中，只有一个大窗格，占满整个窗口区域。</p>
<p>新建的会话中会默认一个窗口，该窗口名字一般是登陆终端的用户名@主机</p>
<p>1.<strong>ctrl+b c</strong></p>
<ul>
<li>创建窗口，默认情况下创建出来的窗口，由窗口序号+窗口名字组成</li>
</ul>
<p>2.<strong>ctr+b ,</strong>（不要忘记逗号）</p>
<ul>
<li>重命名窗口</li>
</ul>
<p>3.<strong>ctrl+b p/n/0/w/l</strong></p>
<ul>
<li>
<p>窗口切换</p>
</li>
<li>
<p>ctrl+b p (previous的首字母) 切换到上一个window。</p>
</li>
<li>
<p>ctrl+b n (next的首字母) 切换到下一个window。</p>
</li>
<li>
<p>ctrl+b 0 切换到0号window，依次类推，可换成任意窗口序号</p>
</li>
<li>
<p>ctrl+b w (windows的首字母) 列出当前session所有window，通过上、下键切换窗口</p>
</li>
<li>
<p>ctrl+b l (字母L的小写)相邻的window切换</p>
</li>
</ul>
<p>4.<strong>ctrl+&amp;</strong></p>
<ul>
<li>关闭当前window，会有y/n的提示</li>
</ul>
<hr>
<h2 id="窗格">窗格</h2>
<p>tmux的一个窗口，可以被分成多个pane（窗格），可以做出分屏的效果</p>
<p>1.<strong>ctrl+b %</strong></p>
<ul>
<li>垂直分屏</li>
</ul>
<p>2.<strong>ctrl+b “</strong></p>
<ul>
<li>水平分屏</li>
<li>分屏之后光标停留在哪个pane上，表示该pane是活动的，另外一般情况下当前pane会被绿色的线条围起来。一般分屏之后当前窗口名字会重置为默认窗口名字。通过多次分屏操作，我们可以得到各种样子的分屏效果</li>
</ul>
<p>3.<strong>ctrl+b o/Up/Down/Left/Right/Space/z</strong></p>
<ul>
<li>切换pane</li>
<li>ctrl+b o 依次切换当前窗口下的各个pane</li>
<li>ctrl+b Up/Down/Left/Right 根据按箭方向选择切换到某个pane</li>
<li>ctrl+b Space (空格键) 对当前窗口下的所有pane重新排列布局，每按一次，换一种样式。</li>
<li>ctrl+b z 最大化当前pane。再按一次后恢复。</li>
</ul>
<p>4.<strong>ctrl+b x</strong></p>
<ul>
<li>关闭当前使用中的pane，操作后有关闭提示</li>
</ul>
]]></content>
    </entry>
</feed>